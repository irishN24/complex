#include <iostream>
#include <math.h>

using namespace std;
struct complex {
    double re, im;
    void complexInput();
    void complexPrint();
    bool istqual(complex);
    double mod();
    complex sum(complex);
    complex sub(complex);
    complex mul(complex);
    complex div(complex);
};

int main()
{
    complex c1, c2, c3;
    ;
    c1.complexInput();
    c2.complexInput();
    c3 = c1.sum(c2);
    c3.complexPrint();
    c3 = c1.sub(c2);
    c3.complexPrint();
    c3 = c1.mul(c2);
    c3.complexPrint();
    c3 = c1.div(c2);
    c3.complexPrint();

    if (c1.istqual(c2)){
        cout << "c1 and c2 are equal"<< "\n";
    }
    else{
        cout << "c1 and c2 are not equal"<< "\n";
    }

    cout << "module c1:"<< c1.mod() << "\n";
    cout << "module c2:" << c2.mod() << "\n";
}
void complex::complexInput(){
    cout << "re = ";
    cin >> re;
    cout << "im = ";
    cin >> im;
}
void complex::complexPrint(){
    cout << re << "+(" << im << "i)" << "\n";
}
complex complex::sum(complex x){
    complex res;
    res.re = re + x.re;
    res.im = im + x.im;
    return res;
}
complex complex::sub(complex x){
    complex res;
    res.re = re - x.re;
    res.im = im - x.im;
    return res;
}
complex complex::mul(complex x){
    complex res;
    res.re = ((re* x.re) - (im * x.im));
    res.im = ((re* x.im) + (im * x.re));
    return res;
}
complex complex::div(complex x){
    complex res;
    double sopr = (x.re*x.re) + (x.im * x.im); //sopr &&&&
    res.re = (re * x.re + im * x.im)/sopr;
    res.im = (im * x.re - re * x.im)/ sopr;
    return res;
}
double complex::mod(){
    double res;
    res = sqrt((re*re) + (im * im));
    return res;
}
bool complex::istqual(complex x){
    return (re == x.re) && (im = x.im);
}

