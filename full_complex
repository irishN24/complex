#include <iostream>
#include <math.h>
#include <sstream>
#include <string>

using namespace std;

class complex {
    double re, im;
public:
    complex(double Re = 0, double Im = 0) : re(Re), im(Im) {}
    double getRe() { //++
        return re;
    }
    void setRe(double Re) { //++
        re = Re;
    }
    double getIm() { //++
        return im;
    }
    void setIm(double Im) { //++
        im = Im;
    }
    bool operator == (const complex& c2) { //сравнение (равенство) ++
        return (re == c2.re) && (im == c2.im);
    }
    bool operator != (const complex& c2) { // сравнение (неравенство) ++
        return (re != c2.re) || (im != c2.im);
    }
    double mod(); //++
    operator char* () {// преобразует комплексное число в строку ++
        static char buff[100];
        snprintf(buff, sizeof(buff), "%g + (%g)", re, im);
        return buff;
    }
    complex operator - () { // возвращает комплексно сопряженное число++
        if (im > 0) {
            return complex(re, -im);
        }
        else {
            return complex(re, im * (-1));
        }
    }
    complex operator + (const complex& c2) { //сложение ++
        complex c3;
        c3.re = re + c2.re;
        c3.im = im + c2.im;
        return c3;
    }
    complex operator += (const complex& c2) {
        re += c2.re;
        im += c2.im;
        return *this;
    }
    complex operator - (const complex& c2) { //вычитание++
        complex c4;
        c4.re = re - c2.re;
        c4.im = im - c2.im;
        return c4;
    }
    complex operator -= (const complex& c2) {
        re -= c2.re;
        im -= c2.im;
        return *this;
    }
    complex operator * (const complex& c2) { //умножение ++
        complex c5;
        c5.re = ((re * c2.re) - (im * c2.im));
        c5.im = ((re * c2.im) + (im * c2.re));
        return c5;
    }
    complex operator *= (const complex& c2) {
        re = ((re * c2.re) - (im * c2.im));
        im = ((re * c2.im) + (im * c2.re));
        return *this;
    }
    complex operator / (const complex& c2) { //деление ++
        complex res;
        double sopra = (c2.re * c2.re) + (c2.im * c2.im);
        res.re = (re * c2.re + im * c2.im) / sopra;
        res.im = (im * c2.re - re * c2.im) / sopra;
        return res;
    }
    complex operator /= (const complex& c2) {
        double sopra = (c2.re * c2.re) + (c2.im * c2.im);
        re = (re * c2.re + im * c2.im) / sopra;
        im = (im * c2.re - re * c2.im) / sopra;
        return *this;
    }
    friend istream& operator >> (istream& is, complex& c) {
        is >> c.re >> c.im;
        return is;
    }
    friend ostream& operator << (ostream& os, const complex& c) {
        os << "(" << c.re << "," << c.im << ")";
        return os;
    }
    void complexInput(); //++
    void complexPrint(); //++
};
int main()
{
    complex c1, c2(-7, 6);
    cout << "Enter first complex: ";
    c1.complexInput();
    cout << "c1 = " << c1 << "\nc2 = " << c2;
    if (c1 == c2)
        cout << "\nComplex numbers are equal\n";
    if (c1 != c2)
        cout << "\nComplex numbers are not equal\n";
    c1.setRe(2);
    c2.setIm(5);
    cout << "c1 re change:" << c1.getRe() << "\nc2 im change:" << c2.getIm();
    cout << "\nModulus of a complex 1: " << c1.mod() << "\n";
    cout << "c1 + c2 = " << c1 + c2 << "\n";
    cout << "c1 - c2 = " << c1 - c2 << "\n";
    cout << "c1 * c2 = " << c1 * c2 << "\n";
    cout << "c1 / c2 = " << c1 / c2 << "\n";
    cout << "-c1 = " << -c1 << "\n";
    complex c3(6, 8);
    c3 += c1;
    c3.complexPrint();
    complex c4(12, 7);
    c4 -= c2;
    c4.complexPrint();
    complex c5(2, 6);
    c5 *= c1;
    c5.complexPrint();
    complex c6(21, 18);
    c6 /= c2;
    cout << c6;
    return 0;
}

double complex::mod() {// возвращает модуль комплексного числа ++
    double res;
    res = sqrt((re * re) + (im * im));
    return res;
}
void complex::complexInput() {
    cout << "re = ";
    cin >> re;
    cout << "im = ";
    cin >> im;
}
void complex::complexPrint() {
    cout << re << "+(" << im << "i)" << "\n";
}
